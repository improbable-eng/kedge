// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/http/routes/routes.proto

package kedge_config_http_routes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProxyMode int32

const (
	ProxyMode_ANY ProxyMode = 0
	// / Reverse Proxy is when the FE serves an authority (Host) publicly and clients connect to that authority
	// / directly. This is used to expose publicly DNS-resolvable names.
	ProxyMode_REVERSE_PROXY ProxyMode = 1
	// / Forward Proxy is when the FE serves as an HTTP_PROXY for a browser or an application. The resolution of the
	// / backend is done by the FE itself, so non-public names can be addressed.
	// / This may be from the 90s, but it still is very useful.
	// /
	// / IMPORTANT: If you have a PAC file configured in Firefox, the HTTPS rule behaves differently than in Chrome. The
	// / proxied requests are not FORWARD_PROXY requests but REVERSE_PROXY_REQUESTS.
	ProxyMode_FORWARD_PROXY ProxyMode = 2
)

var ProxyMode_name = map[int32]string{
	0: "ANY",
	1: "REVERSE_PROXY",
	2: "FORWARD_PROXY",
}
var ProxyMode_value = map[string]int32{
	"ANY":           0,
	"REVERSE_PROXY": 1,
	"FORWARD_PROXY": 2,
}

func (x ProxyMode) String() string {
	return proto.EnumName(ProxyMode_name, int32(x))
}
func (ProxyMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// / Route describes a mapping between a stable proxying endpoint and a pre-defined backend.
type Route struct {
	// / backend_name is the string identifying the HTTP backend pool to send data to.
	BackendName string `protobuf:"bytes,1,opt,name=backend_name,json=backendName" json:"backend_name,omitempty"`
	// / path_rules is a globbing expression that matches a URL path of the request.
	// / See: https://cloud.google.com/compute/docs/load-balancing/http/url-map
	// / If not present, '/*' is default.
	PathRules []string `protobuf:"bytes,2,rep,name=path_rules,json=pathRules" json:"path_rules,omitempty"`
	// / host_matcher matches on the ':authority' header (a.k.a. Host header) enabling Virtual Host-like proxying.
	// / The matching is done through lower-case string-equality.
	// / If none are present, the route skips ':authority' checks.
	HostMatcher string `protobuf:"bytes,3,opt,name=host_matcher,json=hostMatcher" json:"host_matcher,omitempty"`
	// / metadata_matcher matches any HTTP inbound request Headers.
	// / Eeach key provided must find a match for the route to match.
	// / The matching is done through lower-case key match and explicit string-equality of values.
	// / If none are present, the route skips metadata checks.
	HeaderMatcher map[string]string `protobuf:"bytes,4,rep,name=header_matcher,json=headerMatcher" json:"header_matcher,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// / proxy_mode controlls what kind of inbound requests this route matches. See
	ProxyMode   ProxyMode `protobuf:"varint,5,opt,name=proxy_mode,json=proxyMode,enum=kedge.config.http.routes.ProxyMode" json:"proxy_mode,omitempty"`
	PortMatcher uint32    `protobuf:"varint,6,opt,name=port_matcher,json=portMatcher" json:"port_matcher,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Route) GetBackendName() string {
	if m != nil {
		return m.BackendName
	}
	return ""
}

func (m *Route) GetPathRules() []string {
	if m != nil {
		return m.PathRules
	}
	return nil
}

func (m *Route) GetHostMatcher() string {
	if m != nil {
		return m.HostMatcher
	}
	return ""
}

func (m *Route) GetHeaderMatcher() map[string]string {
	if m != nil {
		return m.HeaderMatcher
	}
	return nil
}

func (m *Route) GetProxyMode() ProxyMode {
	if m != nil {
		return m.ProxyMode
	}
	return ProxyMode_ANY
}

func (m *Route) GetPortMatcher() uint32 {
	if m != nil {
		return m.PortMatcher
	}
	return 0
}

func init() {
	proto.RegisterType((*Route)(nil), "kedge.config.http.routes.Route")
	proto.RegisterEnum("kedge.config.http.routes.ProxyMode", ProxyMode_name, ProxyMode_value)
}

func init() { proto.RegisterFile("kedge/config/http/routes/routes.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x5f, 0x8b, 0xd3, 0x40,
	0x14, 0xc5, 0x4d, 0x62, 0x57, 0x72, 0xb3, 0x5d, 0xbb, 0x83, 0x42, 0x58, 0x10, 0xe3, 0x3f, 0x08,
	0x62, 0x27, 0x10, 0x65, 0x59, 0xf6, 0xc9, 0x2d, 0x46, 0x7c, 0xe9, 0x1f, 0x46, 0x50, 0x8b, 0x68,
	0x98, 0x26, 0x63, 0x12, 0xd2, 0x64, 0xc2, 0x64, 0xd2, 0x5a, 0xc5, 0x67, 0x3f, 0xa6, 0xe0, 0x27,
	0x91, 0x49, 0x62, 0x15, 0x96, 0x3e, 0xe5, 0xe6, 0x37, 0xe7, 0x9e, 0x7b, 0xcf, 0x0c, 0x3c, 0xc9,
	0x59, 0x9c, 0x30, 0x2f, 0xe2, 0xe5, 0x97, 0x2c, 0xf1, 0x52, 0x29, 0x2b, 0x4f, 0xf0, 0x46, 0xb2,
	0xba, 0xff, 0xe0, 0x4a, 0x70, 0xc9, 0x91, 0xdd, 0xca, 0x70, 0x27, 0xc3, 0x4a, 0x86, 0xbb, 0xf3,
	0xb3, 0xf3, 0x24, 0x93, 0x69, 0xb3, 0xc2, 0x11, 0x2f, 0xbc, 0x62, 0x9b, 0xc9, 0x9c, 0x6f, 0xbd,
	0x84, 0x8f, 0xdb, 0xb6, 0xf1, 0x86, 0xae, 0xb3, 0x98, 0x4a, 0x2e, 0x6a, 0x6f, 0x5f, 0x76, 0x8e,
	0x0f, 0x7f, 0x1a, 0x30, 0x20, 0xca, 0x02, 0x5d, 0xc0, 0xf1, 0x8a, 0x46, 0x39, 0x2b, 0xe3, 0xb0,
	0xa4, 0x05, 0xb3, 0x35, 0x47, 0x73, 0xcd, 0xc9, 0xdd, 0xdf, 0xbf, 0xee, 0x9f, 0xc2, 0xed, 0xcf,
	0x1f, 0xe9, 0xf8, 0x5b, 0x88, 0x3f, 0x7d, 0xf7, 0x9f, 0x9d, 0xbf, 0xf8, 0xf1, 0x98, 0x58, 0xbd,
	0x74, 0x46, 0x0b, 0x86, 0xee, 0x01, 0x54, 0x54, 0xa6, 0xa1, 0x68, 0xd6, 0xac, 0xb6, 0x75, 0xc7,
	0x70, 0x4d, 0x62, 0x2a, 0x42, 0x14, 0x40, 0x0f, 0xe0, 0x38, 0xe5, 0xb5, 0x0c, 0x0b, 0x2a, 0xa3,
	0x94, 0x09, 0xdb, 0x50, 0xc6, 0xc4, 0x52, 0x6c, 0xda, 0x21, 0xb4, 0x84, 0x93, 0x94, 0xd1, 0x98,
	0x89, 0xbd, 0xe8, 0xa6, 0x63, 0xb8, 0x96, 0xef, 0xe3, 0x43, 0x81, 0x71, 0xbb, 0x34, 0x7e, 0xd3,
	0x76, 0xf5, 0x36, 0x41, 0x29, 0xc5, 0x8e, 0x0c, 0xd3, 0xff, 0x19, 0x9a, 0x00, 0x54, 0x82, 0x7f,
	0xdd, 0x85, 0x05, 0x8f, 0x99, 0x3d, 0x70, 0x34, 0xf7, 0xc4, 0x7f, 0x74, 0xd8, 0x76, 0xa1, 0xb4,
	0x53, 0x1e, 0x33, 0x62, 0x56, 0x7f, 0x4b, 0x95, 0xa0, 0xe2, 0xe2, 0x5f, 0x82, 0x23, 0x47, 0x73,
	0x87, 0xc4, 0x52, 0xac, 0x1f, 0x73, 0xf6, 0x12, 0xd0, 0xf5, 0x5d, 0xd0, 0x08, 0x8c, 0x9c, 0xed,
	0xba, 0xab, 0x24, 0xaa, 0x44, 0x77, 0x60, 0xb0, 0xa1, 0xeb, 0x86, 0xd9, 0x7a, 0xcb, 0xba, 0x9f,
	0x4b, 0xfd, 0x42, 0x7b, 0x7a, 0x09, 0xe6, 0x7e, 0x38, 0xba, 0x05, 0xc6, 0xd5, 0x6c, 0x39, 0xba,
	0x81, 0x4e, 0x61, 0x48, 0x82, 0x77, 0x01, 0x79, 0x1b, 0x84, 0x0b, 0x32, 0xff, 0xb0, 0x1c, 0x69,
	0x0a, 0xbd, 0x9e, 0x93, 0xf7, 0x57, 0xe4, 0x55, 0x8f, 0xf4, 0xd5, 0x51, 0xfb, 0x98, 0xcf, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x44, 0x10, 0xae, 0x47, 0x02, 0x00, 0x00,
}
