syntax = "proto3";

package kedge.config.grpc.backends;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "kedge/config/common/resolvers/resolvers.proto";

/// Backend is a gRPC ClientConn pool maintained to a single serivce.
message Backend {
    /// name is the string identifying the bakcend in all other conifgs.
    string name = 1 [(validator.field) = {regex: "^[a-z_0-9.]{2,64}$"}];

    /// balancer decides which balancing policy to use.
    Balancer balancer = 2;

    /// disable_conntracking turns off the /debug/events tracing and Prometheus monitoring of the pool sie for this backend.
    bool disable_conntracking = 3;

    /// security controls the TLS connection details for the backend. If not present, Insecure (plain text) mode is used.
    Security security = 4;

    /// interceptors controls what interceptors will be enabled for this backend.
    repeated Interceptor interceptors = 5;

    oneof resolver {
        common.resolvers.SrvResolver srv = 10;
        common.resolvers.K8sResolver k8s = 11;
    }

    bool autogenerated = 6;
}

/// Balancer chooses which gRPC balancing policy to use.
enum Balancer {
    // ROUND_ROBIN is the simpliest and default load balancing policy
    ROUND_ROBIN = 0;
}

message Interceptor {
    oneof interceptor {
        bool prometheus = 1;
    }
}

/// Security settings for a backend.
message Security {
    /// insecure_skip_verify skips the server certificate verification completely.
    /// No TLS config (for testclient or server) will be used. This should *not* be used in production software.
    bool insecure_skip_verify = 1;

    /// config_name indicates the TlsServerConfig to be used for this connection.
    string config_name = 2;
    // TODO(mwitkow): add tls-config specification for server-side (CA certs etc.).
    // TODO(mwitkow): add tls-config specification for testclient-side (testclient-cert etc.).
}

