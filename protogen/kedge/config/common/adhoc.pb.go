// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/common/adhoc.proto

/*
Package kedge_config_common is a generated protocol buffer package.

It is generated from these files:
	kedge/config/common/adhoc.proto

It has these top-level messages:
	Adhoc
*/
package kedge_config_common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / Adhoc describes an adhoc proxying method that is not backed by a backend, but dials a "free form" DNS record.
type Adhoc struct {
	// / dns_name_matcher matches the hostname that will be used to resolve A records.
	// / The names are matched with a * prefix. For example:
	// / - *.pod.cluster.local
	// / - *.my_namespace.svc.cluster.local
	// / - *.local
	// / The first rule that matches a DNS name will be used, and its ports will be checked.
	DnsNameMatcher string `protobuf:"bytes,1,opt,name=dns_name_matcher,json=dnsNameMatcher" json:"dns_name_matcher,omitempty"`
	// / Port controls the :port behaviour of the URI requested.
	Port *Adhoc_Port `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	// / dns_name_replace is an optional replacement pattern to alter hostname before A records resolution.
	// / This is useful when exposed domain is different than local resolvable one.
	// /
	// / Example:
	// / Inside cluster you can resolve only 'abc.default.svc.cluster.local' however since you have multiple clusters
	// / you want this abc service/pod to be accessible as 'abc.default.svc.cluster1.example.com'. In this case you want
	// / to set dns_name_replace.pattern "cluster1.example.com" , dns_name_replace.substitution="cluster.local"
	DnsNameReplace *Adhoc_Replace `protobuf:"bytes,3,opt,name=dns_name_replace,json=dnsNameReplace" json:"dns_name_replace,omitempty"`
}

func (m *Adhoc) Reset()                    { *m = Adhoc{} }
func (m *Adhoc) String() string            { return proto.CompactTextString(m) }
func (*Adhoc) ProtoMessage()               {}
func (*Adhoc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Adhoc) GetDnsNameMatcher() string {
	if m != nil {
		return m.DnsNameMatcher
	}
	return ""
}

func (m *Adhoc) GetPort() *Adhoc_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *Adhoc) GetDnsNameReplace() *Adhoc_Replace {
	if m != nil {
		return m.DnsNameReplace
	}
	return nil
}

// / Port controls how the :port part of the URI is processed.
type Adhoc_Port struct {
	// / default is the default port used if no entry is present.
	// / This defaults to 80.
	Default uint32 `protobuf:"varint,1,opt,name=default" json:"default,omitempty"`
	// / allowed ports is a list of whitelisted ports that this Adhoc rule will allow.
	Allowed []uint32 `protobuf:"varint,3,rep,packed,name=allowed" json:"allowed,omitempty"`
	// / allowed_ranges is a list of whitelisted port ranges that this Adhoc rule will allow.
	AllowedRanges []*Adhoc_Port_Range `protobuf:"bytes,4,rep,name=allowed_ranges,json=allowedRanges" json:"allowed_ranges,omitempty"`
}

func (m *Adhoc_Port) Reset()                    { *m = Adhoc_Port{} }
func (m *Adhoc_Port) String() string            { return proto.CompactTextString(m) }
func (*Adhoc_Port) ProtoMessage()               {}
func (*Adhoc_Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Adhoc_Port) GetDefault() uint32 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *Adhoc_Port) GetAllowed() []uint32 {
	if m != nil {
		return m.Allowed
	}
	return nil
}

func (m *Adhoc_Port) GetAllowedRanges() []*Adhoc_Port_Range {
	if m != nil {
		return m.AllowedRanges
	}
	return nil
}

type Adhoc_Port_Range struct {
	// / from is an inclusive lower bound for the port range
	From uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	// / to is an inclusive upper bound for the port range
	To uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
}

func (m *Adhoc_Port_Range) Reset()                    { *m = Adhoc_Port_Range{} }
func (m *Adhoc_Port_Range) String() string            { return proto.CompactTextString(m) }
func (*Adhoc_Port_Range) ProtoMessage()               {}
func (*Adhoc_Port_Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0, 0} }

func (m *Adhoc_Port_Range) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Adhoc_Port_Range) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

type Adhoc_Replace struct {
	// pattern specified pattern to substitute the hostname with. If not pattern is not found, nothing is substituted
	// with warning.
	Pattern      string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	Substitution string `protobuf:"bytes,2,opt,name=substitution" json:"substitution,omitempty"`
}

func (m *Adhoc_Replace) Reset()                    { *m = Adhoc_Replace{} }
func (m *Adhoc_Replace) String() string            { return proto.CompactTextString(m) }
func (*Adhoc_Replace) ProtoMessage()               {}
func (*Adhoc_Replace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Adhoc_Replace) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *Adhoc_Replace) GetSubstitution() string {
	if m != nil {
		return m.Substitution
	}
	return ""
}

func init() {
	proto.RegisterType((*Adhoc)(nil), "kedge.config.common.Adhoc")
	proto.RegisterType((*Adhoc_Port)(nil), "kedge.config.common.Adhoc.Port")
	proto.RegisterType((*Adhoc_Port_Range)(nil), "kedge.config.common.Adhoc.Port.Range")
	proto.RegisterType((*Adhoc_Replace)(nil), "kedge.config.common.Adhoc.Replace")
}

func init() { proto.RegisterFile("kedge/config/common/adhoc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x4b, 0xeb, 0x40,
	0x14, 0x25, 0x1f, 0x6d, 0x79, 0xd3, 0xd7, 0xf2, 0x98, 0xb7, 0x09, 0xd9, 0x34, 0x14, 0x84, 0xa2,
	0x34, 0x91, 0x0a, 0x6e, 0x5c, 0xe9, 0xba, 0x8a, 0x64, 0xe3, 0xb2, 0x4c, 0x33, 0xd3, 0x34, 0x34,
	0x33, 0x37, 0xcc, 0xdc, 0xd8, 0x5f, 0xe6, 0x4f, 0x71, 0x2d, 0xf8, 0x4b, 0x24, 0x93, 0xb4, 0x7e,
	0x20, 0xba, 0x3b, 0x27, 0xe7, 0xdc, 0x33, 0xe7, 0xde, 0x90, 0xc9, 0x4e, 0xf0, 0x5c, 0x24, 0x19,
	0xa8, 0x4d, 0x91, 0x27, 0x19, 0x48, 0x09, 0x2a, 0x61, 0x7c, 0x0b, 0x59, 0x5c, 0x69, 0x40, 0xa0,
	0xff, 0xad, 0x21, 0x6e, 0x0d, 0x71, 0x6b, 0x08, 0x2f, 0xf3, 0x02, 0xb7, 0xf5, 0xba, 0xa1, 0x89,
	0xdc, 0x17, 0xb8, 0x83, 0x7d, 0x92, 0xc3, 0xdc, 0x4e, 0xcc, 0x1f, 0x59, 0x59, 0x70, 0x86, 0xa0,
	0x4d, 0x72, 0x84, 0x6d, 0xd8, 0xf4, 0xd9, 0x23, 0xbd, 0xeb, 0x26, 0x9c, 0x9e, 0x93, 0x7f, 0x5c,
	0x99, 0x95, 0x62, 0x52, 0xac, 0x24, 0xc3, 0x6c, 0x2b, 0x74, 0xe0, 0x44, 0xce, 0xec, 0xcf, 0x4d,
	0xff, 0xf5, 0x65, 0xe2, 0x46, 0x4e, 0x3a, 0xe6, 0xca, 0xdc, 0x31, 0x29, 0x6e, 0x5b, 0x95, 0x5e,
	0x11, 0xbf, 0x02, 0x8d, 0x81, 0x1b, 0x39, 0xb3, 0xe1, 0x62, 0x12, 0x7f, 0xd3, 0x2b, 0xb6, 0xd9,
	0xf1, 0x3d, 0x68, 0x3c, 0xc6, 0xd8, 0x21, 0xba, 0xfc, 0xf0, 0x9c, 0x16, 0x55, 0xc9, 0x32, 0x11,
	0x78, 0x36, 0x68, 0xfa, 0x43, 0x50, 0xda, 0x3a, 0x8f, 0x55, 0x3a, 0x1e, 0x3e, 0x39, 0xc4, 0x6f,
	0x1e, 0xa1, 0x01, 0x19, 0x70, 0xb1, 0x61, 0x75, 0x89, 0xb6, 0xfc, 0x28, 0x3d, 0xd0, 0x46, 0x61,
	0x65, 0x09, 0x7b, 0xc1, 0x03, 0x2f, 0xf2, 0x1a, 0xa5, 0xa3, 0x74, 0x49, 0xc6, 0x1d, 0x5c, 0x69,
	0xa6, 0x72, 0x61, 0x02, 0x3f, 0xf2, 0x66, 0xc3, 0xc5, 0xc9, 0x2f, 0x1b, 0xc5, 0x69, 0xe3, 0x4e,
	0x47, 0xdd, 0xb0, 0x65, 0x26, 0x3c, 0x23, 0x3d, 0x8b, 0x28, 0x25, 0xfe, 0x46, 0x83, 0xec, 0x7a,
	0x58, 0x4c, 0xc7, 0xc4, 0x45, 0xb0, 0x07, 0x1b, 0xa5, 0x2e, 0x42, 0xf8, 0x40, 0x06, 0xdd, 0x0a,
	0x34, 0x22, 0x83, 0x8a, 0x21, 0x0a, 0xad, 0xbe, 0x9c, 0xfd, 0xf0, 0x99, 0x9e, 0x92, 0xbf, 0xa6,
	0x5e, 0x1b, 0x2c, 0xb0, 0xc6, 0x02, 0x94, 0x8d, 0x79, 0xb7, 0x7d, 0xd2, 0xd6, 0x7d, 0xfb, 0x7b,
	0x2f, 0xde, 0x02, 0x00, 0x00, 0xff, 0xff, 0xda, 0x8c, 0x20, 0x5e, 0x4e, 0x02, 0x00, 0x00,
}
