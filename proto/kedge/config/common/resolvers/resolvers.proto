syntax = "proto3";

package kedge.config.common.resolvers;

/// SrvBackend describes a backend that is resolved and load balanced using SRV.
message SrvResolver {
    /// dns_name specifies the address to look up using DNS SRV. Needs to be a FQDN.
    /// E.g. "_grpc._tcp.someservice.somenamespace.svc.cluster.local"
    string dns_name = 1;
    /// not recommended, but port override allows to ignore port form SRV record and use one defined here.
    /// Useful when there are multiple services identifed under the same domain.
    uint32 port_override = 2;
}

/// K8sResolver uses the Kubernetes Endpoints API to identify the service.
/// It watched Endpoint API for changes using the pod's credentails to fetch the service information.
message K8sResolver {
    // Common kube DNS name with optional port: "<service><|.namespace>(.whatever suffix)<|:port_name|:value number>"
    // to resolve by this resolver using endpoints API.
    // e.g "backend1.namespace1:http_port1"
    string dns_port_name = 1;
}

/// HostResolver describes a backend that is resolved and load balanced using host resultion with pinned port.
message HostResolver {
    /// dns_name specifies the address to look up using A record.
    string dns_name = 1;
    /// port specified the port that the load balancer should go after host lookup.
    uint32 port = 2;
}