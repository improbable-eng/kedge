// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/common/resolvers/resolvers.proto

/*
Package kedge_config_common_resolvers is a generated protocol buffer package.

It is generated from these files:
	kedge/config/common/resolvers/resolvers.proto

It has these top-level messages:
	SrvResolver
	K8SResolver
	HostResolver
*/
package kedge_config_common_resolvers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / SrvBackend describes a backend that is resolved and load balanced using SRV.
type SrvResolver struct {
	// / dns_name specifies the address to look up using DNS SRV. Needs to be a FQDN.
	// / E.g. "_grpc._tcp.someservice.somenamespace.svc.cluster.local"
	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	// / not recommended, but port override allows to ignore port form SRV record and use one defined here.
	// / Useful when there are multiple services identifed under the same domain.
	PortOverride uint32 `protobuf:"varint,2,opt,name=port_override,json=portOverride" json:"port_override,omitempty"`
}

func (m *SrvResolver) Reset()                    { *m = SrvResolver{} }
func (m *SrvResolver) String() string            { return proto.CompactTextString(m) }
func (*SrvResolver) ProtoMessage()               {}
func (*SrvResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SrvResolver) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *SrvResolver) GetPortOverride() uint32 {
	if m != nil {
		return m.PortOverride
	}
	return 0
}

// / K8sResolver uses the Kubernetes Endpoints API to identify the service.
// / It watched Endpoint API for changes using the pod's credentails to fetch the service information.
type K8SResolver struct {
	// Common kube DNS name with optional port: "<service><|.namespace>(.whatever suffix)<|:port_name|:value number>"
	// to resolve by this resolver using endpoints API.
	// e.g "backend1.namespace1:http_port1"
	DnsPortName string `protobuf:"bytes,1,opt,name=dns_port_name,json=dnsPortName" json:"dns_port_name,omitempty"`
}

func (m *K8SResolver) Reset()                    { *m = K8SResolver{} }
func (m *K8SResolver) String() string            { return proto.CompactTextString(m) }
func (*K8SResolver) ProtoMessage()               {}
func (*K8SResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *K8SResolver) GetDnsPortName() string {
	if m != nil {
		return m.DnsPortName
	}
	return ""
}

// / HostResolver describes a backend that is resolved and load balanced using host resultion with pinned port.
type HostResolver struct {
	// / dns_name specifies the address to look up using A record.
	DnsName string `protobuf:"bytes,1,opt,name=dns_name,json=dnsName" json:"dns_name,omitempty"`
	// / port specified the port that the load balancer should go after host lookup.
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *HostResolver) Reset()                    { *m = HostResolver{} }
func (m *HostResolver) String() string            { return proto.CompactTextString(m) }
func (*HostResolver) ProtoMessage()               {}
func (*HostResolver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HostResolver) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *HostResolver) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*SrvResolver)(nil), "kedge.config.common.resolvers.SrvResolver")
	proto.RegisterType((*K8SResolver)(nil), "kedge.config.common.resolvers.K8sResolver")
	proto.RegisterType((*HostResolver)(nil), "kedge.config.common.resolvers.HostResolver")
}

func init() { proto.RegisterFile("kedge/config/common/resolvers/resolvers.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcd, 0x4e, 0x4d, 0x49,
	0x4f, 0xd5, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3,
	0x2f, 0x4a, 0x2d, 0xce, 0xcf, 0x29, 0x4b, 0x2d, 0x2a, 0x46, 0xb0, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x64, 0xc1, 0xca, 0xf5, 0x20, 0xca, 0xf5, 0x20, 0xca, 0xf5, 0xe0, 0x8a, 0x94, 0x7c,
	0xb9, 0xb8, 0x83, 0x8b, 0xca, 0x82, 0xa0, 0x7c, 0x21, 0x49, 0x2e, 0x8e, 0x94, 0xbc, 0xe2, 0xf8,
	0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xf6, 0x94, 0xbc, 0x62, 0xbf,
	0xc4, 0xdc, 0x54, 0x21, 0x65, 0x2e, 0xde, 0x82, 0xfc, 0xa2, 0x92, 0xf8, 0xfc, 0xb2, 0xd4, 0xa2,
	0xa2, 0xcc, 0x94, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x1e, 0x90, 0xa0, 0x3f, 0x54,
	0x4c, 0xc9, 0x90, 0x8b, 0xdb, 0xdb, 0xa2, 0x18, 0x6e, 0x9c, 0x12, 0x17, 0x2f, 0xc8, 0x38, 0xb0,
	0x3e, 0x24, 0x33, 0xb9, 0x53, 0xf2, 0x8a, 0x03, 0xf2, 0x8b, 0x4a, 0x40, 0xe6, 0x2a, 0xd9, 0x72,
	0xf1, 0x78, 0xe4, 0x17, 0x97, 0x10, 0xe3, 0x04, 0x21, 0x2e, 0x16, 0x90, 0x51, 0x50, 0x9b, 0xc1,
	0xec, 0x24, 0x36, 0xb0, 0x37, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0xb5, 0x25, 0x90,
	0x17, 0x01, 0x00, 0x00,
}
