
syntax = "proto3";

package winch.config;

import "github.com/mwitkow/go-proto-validators/validator.proto";

/// MapperConfig is the top level configuration message for a winch mapper.
message MapperConfig {
    repeated Route routes = 1;
}

enum Protocol {
    ANY = 0;
    HTTP = 1;
    GRPC = 2;
}

message Route {
    // Optional auth injection. Reference to AuthSource.
    string backend_auth = 1;
    string proxy_auth = 2;
    oneof type {
        DirectRoute direct = 3;
        RegexpRoute regexp = 4;
    }
    Protocol protocol = 5;
}

/// Simplest routing mechanism using just direct mapping between dns and (proxy) kedge target.
message DirectRoute {
    // Key needs to be in host:port format.
    string key = 1 [(validator.field) = {msg_exists : true}];
    string url = 2 [(validator.field) = {msg_exists : true}];
}

message RegexpRoute {
    // Regexp RE2 expression that will be applied on given domain:port
    string exp = 1 [(validator.field) = {msg_exists : true}];

    // Kedge URL to be used if we have a match. It can be a string including variable from regexp expression in a form
    // of bash-like variable. E.g
    // exp = ([a-z0-9-].*)[.](?P<cluster>[a-z0-9-].*)[.]internal[.]example[.]org
    // in that case you can use following variable:
    // - ${cluster}
    // NOTE: https:// prefix is required here.
    string url = 2 [(validator.field) = {msg_exists : true}];
}