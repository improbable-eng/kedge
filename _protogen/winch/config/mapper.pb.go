// Code generated by protoc-gen-go. DO NOT EDIT.
// source: winch/config/mapper.proto

package winch_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// / MapperConfig is the top level configuration message for a winch mapper.
type MapperConfig struct {
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *MapperConfig) Reset()                    { *m = MapperConfig{} }
func (m *MapperConfig) String() string            { return proto.CompactTextString(m) }
func (*MapperConfig) ProtoMessage()               {}
func (*MapperConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *MapperConfig) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Route struct {
	// Optional auth injection. Reference to AuthSource.
	BackendAuth string `protobuf:"bytes,1,opt,name=backend_auth,json=backendAuth" json:"backend_auth,omitempty"`
	ProxyAuth   string `protobuf:"bytes,2,opt,name=proxy_auth,json=proxyAuth" json:"proxy_auth,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Route_Direct
	//	*Route_Regexp
	Type isRoute_Type `protobuf_oneof:"type"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isRoute_Type interface {
	isRoute_Type()
}

type Route_Direct struct {
	Direct *DirectRoute `protobuf:"bytes,3,opt,name=direct,oneof"`
}
type Route_Regexp struct {
	Regexp *RegexpRoute `protobuf:"bytes,4,opt,name=regexp,oneof"`
}

func (*Route_Direct) isRoute_Type() {}
func (*Route_Regexp) isRoute_Type() {}

func (m *Route) GetType() isRoute_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Route) GetBackendAuth() string {
	if m != nil {
		return m.BackendAuth
	}
	return ""
}

func (m *Route) GetProxyAuth() string {
	if m != nil {
		return m.ProxyAuth
	}
	return ""
}

func (m *Route) GetDirect() *DirectRoute {
	if x, ok := m.GetType().(*Route_Direct); ok {
		return x.Direct
	}
	return nil
}

func (m *Route) GetRegexp() *RegexpRoute {
	if x, ok := m.GetType().(*Route_Regexp); ok {
		return x.Regexp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Route) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Route_OneofMarshaler, _Route_OneofUnmarshaler, _Route_OneofSizer, []interface{}{
		(*Route_Direct)(nil),
		(*Route_Regexp)(nil),
	}
}

func _Route_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Route)
	// type
	switch x := m.Type.(type) {
	case *Route_Direct:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Direct); err != nil {
			return err
		}
	case *Route_Regexp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Regexp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Route.Type has unexpected type %T", x)
	}
	return nil
}

func _Route_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Route)
	switch tag {
	case 3: // type.direct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectRoute)
		err := b.DecodeMessage(msg)
		m.Type = &Route_Direct{msg}
		return true, err
	case 4: // type.regexp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegexpRoute)
		err := b.DecodeMessage(msg)
		m.Type = &Route_Regexp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Route_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Route)
	// type
	switch x := m.Type.(type) {
	case *Route_Direct:
		s := proto.Size(x.Direct)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Route_Regexp:
		s := proto.Size(x.Regexp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// / Simplest routing mechanism using just direct mapping between dns and (proxy) kedge target.
type DirectRoute struct {
	// Key needs to be in host:port format.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *DirectRoute) Reset()                    { *m = DirectRoute{} }
func (m *DirectRoute) String() string            { return proto.CompactTextString(m) }
func (*DirectRoute) ProtoMessage()               {}
func (*DirectRoute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DirectRoute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DirectRoute) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type RegexpRoute struct {
	// Regexp RE2 expression that will be applied on given domain:port
	Exp string `protobuf:"bytes,1,opt,name=exp" json:"exp,omitempty"`
	// Kedge URL to be used if we have a match. It can be a string including variable from regexp expression in a form
	// of bash-like variable. E.g
	// exp = ([a-z0-9-].*)[.](?P<cluster>[a-z0-9-].*)[.]internal[.]example[.]org
	// in that case you can use following variable:
	// - ${cluster}
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
}

func (m *RegexpRoute) Reset()                    { *m = RegexpRoute{} }
func (m *RegexpRoute) String() string            { return proto.CompactTextString(m) }
func (*RegexpRoute) ProtoMessage()               {}
func (*RegexpRoute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RegexpRoute) GetExp() string {
	if m != nil {
		return m.Exp
	}
	return ""
}

func (m *RegexpRoute) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*MapperConfig)(nil), "winch.config.MapperConfig")
	proto.RegisterType((*Route)(nil), "winch.config.Route")
	proto.RegisterType((*DirectRoute)(nil), "winch.config.DirectRoute")
	proto.RegisterType((*RegexpRoute)(nil), "winch.config.RegexpRoute")
}

func init() { proto.RegisterFile("winch/config/mapper.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x4b, 0xc3, 0x30,
	0x18, 0xc7, 0xcd, 0x36, 0x0b, 0x4b, 0x77, 0xaa, 0x97, 0x4e, 0x10, 0xeb, 0x4e, 0x03, 0x59, 0x0b,
	0x1b, 0x78, 0xf1, 0xb4, 0xe9, 0xc1, 0x8b, 0x97, 0x7c, 0x01, 0xe9, 0x4b, 0x6c, 0x43, 0x5f, 0x12,
	0xb2, 0xc4, 0xb6, 0x9f, 0xcd, 0x0f, 0x23, 0xf8, 0x49, 0x24, 0x4f, 0xca, 0xac, 0xa2, 0xb7, 0xf0,
	0xfc, 0xfe, 0xcf, 0xef, 0xff, 0x40, 0xf0, 0xb2, 0x65, 0x4d, 0x5a, 0x44, 0x29, 0x6f, 0x5e, 0x59,
	0x1e, 0xd5, 0xb1, 0x10, 0x54, 0x86, 0x42, 0x72, 0xc5, 0xbd, 0x05, 0xa0, 0xd0, 0xa2, 0xcb, 0xbb,
	0x9c, 0xa9, 0x42, 0x27, 0x61, 0xca, 0xeb, 0xa8, 0x6e, 0x99, 0x2a, 0x79, 0x1b, 0xe5, 0x7c, 0x03,
	0xd1, 0xcd, 0x5b, 0x5c, 0xb1, 0x2c, 0x56, 0x5c, 0x1e, 0xa3, 0xd3, 0xd3, 0x5a, 0x56, 0xf7, 0x78,
	0xf1, 0x0c, 0xd6, 0x07, 0xf0, 0x78, 0xb7, 0xd8, 0x91, 0x5c, 0x2b, 0x7a, 0xf4, 0x51, 0x30, 0x5d,
	0xbb, 0xdb, 0x8b, 0x70, 0x5c, 0x13, 0x12, 0xc3, 0xc8, 0x10, 0x59, 0xbd, 0x23, 0x7c, 0x0e, 0x13,
	0xef, 0x06, 0x2f, 0x92, 0x38, 0x2d, 0x69, 0x93, 0xbd, 0xc4, 0x5a, 0x15, 0x3e, 0x0a, 0xd0, 0x7a,
	0x4e, 0xdc, 0x61, 0xb6, 0xd7, 0xaa, 0xf0, 0xae, 0x30, 0x16, 0x92, 0x77, 0xbd, 0x0d, 0x4c, 0x20,
	0x30, 0x87, 0x09, 0xe0, 0x1d, 0x76, 0x32, 0x26, 0x69, 0xaa, 0xfc, 0x69, 0x80, 0xd6, 0xee, 0x76,
	0xf9, 0xb3, 0xf8, 0x11, 0x18, 0x94, 0x3d, 0x9d, 0x91, 0x21, 0x6a, 0x96, 0x24, 0xcd, 0x69, 0x27,
	0xfc, 0xd9, 0x5f, 0x4b, 0x04, 0xd8, 0x69, 0xc9, 0x46, 0x0f, 0x0e, 0x9e, 0xa9, 0x5e, 0xd0, 0xd5,
	0x1e, 0xbb, 0x23, 0xab, 0xe7, 0xe3, 0x69, 0x49, 0x7b, 0x7b, 0xf9, 0xc1, 0xf9, 0xfc, 0xb8, 0x9e,
	0x04, 0x88, 0x98, 0x91, 0x21, 0x5a, 0x56, 0xf6, 0xe4, 0x6f, 0xa2, 0x65, 0x65, 0x14, 0xa3, 0x0e,
	0x13, 0x34, 0xb7, 0xfc, 0x52, 0xd0, 0x4e, 0xfc, 0xaf, 0x48, 0x1c, 0xf8, 0x87, 0xdd, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x29, 0xd0, 0xb7, 0x92, 0xea, 0x01, 0x00, 0x00,
}
