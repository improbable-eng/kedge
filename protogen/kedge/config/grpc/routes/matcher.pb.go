// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kedge/config/grpc/routes/matcher.proto

/*
Package kedge_config_grpc_routes is a generated protocol buffer package.

It is generated from these files:
	kedge/config/grpc/routes/matcher.proto
	kedge/config/grpc/routes/routes.proto

It has these top-level messages:
	Matcher
	Route
*/
package kedge_config_grpc_routes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// / Matcher describes a rule that matches any gRPC route.
type Matcher struct {
	// / service_name is a globbing expression that matches a full gRPC service name.
	// / For example a method call to 'com.example.MyService/Create' would be matched by:
	// /  - com.example.MyService
	// /  - com.example.*
	// /  - com.*
	// /  - *
	// / If not present, '*' is default.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// / authority matches on the ':authority' header (a.k.a. Host header) enabling Virtual Host-like proxying.
	// / The matching is done through lower-case string-equality.
	// / If none are present, the route skips ':authority' checks.
	// / Accepts regexp RE2 expression.
	Authority string `protobuf:"bytes,3,opt,name=authority" json:"authority,omitempty"`
	// / metadata matches any gRPC inbound request metadata.
	// / Each key provided must find a match for the route to match.
	// / The matching is done through lower-case key match and explicit string-equality of values.
	// / If a given metadata entry has more than one string value, at least one of them needs to match.
	// / If none are present, the route skips metadata checks.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Matcher) Reset()                    { *m = Matcher{} }
func (m *Matcher) String() string            { return proto.CompactTextString(m) }
func (*Matcher) ProtoMessage()               {}
func (*Matcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Matcher) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Matcher) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *Matcher) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*Matcher)(nil), "kedge.config.grpc.routes.Matcher")
}

func init() { proto.RegisterFile("kedge/config/grpc/routes/matcher.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xcd, 0x4a, 0x03, 0x31,
	0x10, 0xc7, 0xd9, 0xae, 0x5f, 0x4d, 0x15, 0x24, 0x78, 0x08, 0xc5, 0x43, 0xf5, 0x20, 0xbd, 0x34,
	0x01, 0x05, 0x11, 0x3d, 0x7b, 0x92, 0x7a, 0xe8, 0x0b, 0xc8, 0x34, 0x3b, 0x66, 0xc3, 0x36, 0x9b,
	0x92, 0x9d, 0xdd, 0xb2, 0xef, 0xe9, 0x03, 0x49, 0x93, 0xb5, 0xe2, 0xc1, 0xdb, 0x64, 0xe6, 0xf7,
	0xff, 0x08, 0xbb, 0xab, 0xb0, 0x30, 0xa8, 0xb4, 0xaf, 0x3f, 0xad, 0x51, 0x26, 0x6c, 0xb5, 0x0a,
	0xbe, 0x25, 0x6c, 0x94, 0x03, 0xd2, 0x25, 0x06, 0xb9, 0x0d, 0x9e, 0x3c, 0x17, 0x91, 0x93, 0x89,
	0x93, 0x7b, 0x4e, 0x26, 0x6e, 0xfa, 0x68, 0x2c, 0x95, 0xed, 0x5a, 0x6a, 0xef, 0x94, 0xdb, 0x59,
	0xaa, 0xfc, 0x4e, 0x19, 0xbf, 0x88, 0xb2, 0x45, 0x07, 0x1b, 0x5b, 0x00, 0xf9, 0xd0, 0xa8, 0xc3,
	0x98, 0x1c, 0x6f, 0xbf, 0x32, 0x76, 0xba, 0x4c, 0x19, 0xfc, 0x86, 0x9d, 0x37, 0x18, 0x3a, 0xab,
	0xf1, 0xa3, 0x06, 0x87, 0x62, 0x34, 0xcb, 0xe6, 0xe3, 0xd5, 0x64, 0xd8, 0xbd, 0x83, 0x43, 0x7e,
	0xcd, 0xc6, 0xd0, 0x52, 0xe9, 0x83, 0xa5, 0x5e, 0xe4, 0xf1, 0xfe, 0xbb, 0xe0, 0x6f, 0xec, 0xcc,
	0x21, 0x41, 0x01, 0x04, 0xe2, 0x68, 0x96, 0xcf, 0x27, 0xf7, 0x4a, 0xfe, 0xd7, 0x58, 0x0e, 0xa9,
	0x72, 0x39, 0x28, 0x5e, 0x6b, 0x0a, 0xfd, 0xea, 0x60, 0x30, 0x7d, 0x61, 0x17, 0x7f, 0x4e, 0xfc,
	0x92, 0xe5, 0x15, 0xf6, 0x22, 0x8b, 0xa9, 0xfb, 0x91, 0x5f, 0xb1, 0xe3, 0x0e, 0x36, 0xed, 0x4f,
	0xd3, 0xf4, 0x78, 0x1e, 0x3d, 0x65, 0xeb, 0x93, 0xf8, 0xbb, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x45, 0xbd, 0x6f, 0x67, 0x59, 0x01, 0x00, 0x00,
}
